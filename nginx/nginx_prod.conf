events {
    worker_connections 1024;
}

worker_processes auto;


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    http2 on;
    server_tokens off;

    # preventing DDOS
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    upstream backend {
        server backend:8000;
    }

    server {
        listen 443 ssl;
        server_name ${NGINX_SERVER_NAME};
        root /usr/share/nginx/html;

        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 1.1.1.1 valid=300s;
        resolver_timeout 5s;

        ssl_certificate /etc/nginx/ssl/tamado.app.cert.pem;
        ssl_certificate_key /etc/nginx/ssl/tamado.app.key.pem;

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        # Compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
            # Only 20 requests per user
            limit_req zone=mylimit burst=20;
        }

        # Cache images
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            add_header Cache-Control "public, immutable";
        }

        location /static/ {
            alias /app/staticfiles/;
        }

        location /media/ {
            alias /app/media/;
        }

        # Proxy requests to the backend
        # restrict api access to the frontend
        location /api/ {
            proxy_pass http://backend;
            valid_referers none blocked ${NGINX_SERVER_DOMAIN};
            if ($invalid_referer) {
                return 403;
            }
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 80;
        server_name ${NGINX_SERVER_NAME};
        return 301 https://$host$request_uri;
    }
}

